@using Cards.Data.Game
@using Cards.Data.Game.TrickGame.Cards
@using Cards.Pages.Game.TrickGame

<div class="hand">
	@if (this.Cards is not null)
	{
		foreach (Card card in this.Cards!)
		{
			<div class="playing-card @(card.Color.ToString().ToLower()) @(card.Height.ToString().ToLower())">
				<span class="header"></span>
				<span class="footer"></span>
			</div>
		}
	}
</div>

@code {
	[Parameter]
	public IList<Card>? Cards { get; set; }

	[Parameter]
	public EventCallback<IList<Card>?> CardsChanged { get; set; }

	[Parameter]
	public bool Playable { get; set; }

	public async void PlayCard(Player player, Card card, CardStack onTo)
	{
		if (!this.Playable)
			throw new InvalidOperationException("Cannot play a card if Hand.Playable is set to false.");
		if (!this.Cards!.Contains(card))
			throw new ArgumentException("Cannot play a card not in Hand.Cards list.", nameof(Card));
		card.Play(player, ref onTo);
		this.Cards.Remove(card);
		await this.CardsChanged.InvokeAsync(this.Cards);
	}

	protected override void OnParametersSet() => base.OnParametersSet();
	protected override Task OnParametersSetAsync() => base.OnParametersSetAsync();
}

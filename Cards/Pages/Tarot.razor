@page "/tarot"
@using Cards.ComponentBase
@using Cards.Data.Game
@using Cards.Data.Game.TrickGame
@using Cards.Pages.Game
@using Cards.Server.Clients
@using Cards.Server.Hubs
@using Cards.Services
@using Microsoft.AspNetCore.SignalR.Client
@inherits TrickGameBase<TarotTeam>
@implements ITarotClient
<h3>Tarot</h3>

<PlayerList Game="@this.Game" @ref="this.playerList"/>
<AuthorizeView>
    <Authorized>
        @if (!this.IsPlaying)
        {
            <button class="btn btn-primary" @onclick="this.Play">Play</button>
        } else 
        {
            if (!this.IsReady)
            {
                <button class="btn btn-primary" @onclick="this.Ready">Ready</button>
                <text>&nbsp;</text>
                <button class="btn btn-primary" @onclick="this.Quit">Quit</button>
            } else
            {
                <button class="btn btn-primary" @onclick="this.Unready">Unready</button>
                <text>&nbsp;</text>
                <button class="btn btn-primary" @onclick="this.Quit">Quit</button>
                if (this.IsHost && this.IsGameReady)
                {
                    <text>&nbsp;</text>
                    <button class="btn btn-primary" @onclick="this.Launch">Launch</button>
                }
            }
        }
    </Authorized>
    <NotAuthorized>
        <div class="tooltip">
            <button class="btn btn-primary" disabled>Play</button>
            <span class="tooltiptext requires-authentication" />
        </div>
    </NotAuthorized>
</AuthorizeView>
<Hand Playable="true" @bind-Cards="this._cards" @ref="this.hand"/>

@code {
    private IList<Card>? _cards;
    protected override Data.Game.Game Game => Data.Game.Game.Tarot;
    protected override IList<TarotTeam> Teams { get; init; } = new List<TarotTeam>();
    protected override bool IsGameReady => this.playerList.players.Count switch
    {
        >= 3 and <= 5 => true,
        _ => false
    };

    private sealed class CardsParameter
    {
        [Parameter]
        public IList<Card>? Cards { get; set; }
    }

    public override Task Start(IEnumerable<Card> cards)
    {
        this._cards = new List<Card>(cards);
        this.StateHasChanged();
        return Task.CompletedTask;
    }
}
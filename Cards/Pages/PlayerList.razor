@using Cards.Data
@using Cards.Data.Game
@using Cards.Server.Clients
@using Cards.Server.Hubs
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IPlayerListClient
@implements IAsyncDisposable

<div class="form-group">
    <label>
        Number of players: @this.players.Count
    </label>
</div>

<hr />

<ul id="playerList">
    @foreach (Player player in this.players)
    {

        <li>@player.Name | @(player.Ready ? string.Empty : "Not ")Ready</li>
    }
</ul>

@code {
    public HubConnection hubConnection = null!;
    public IList<Player> players = new List<Player>();

    [Parameter]
    public Data.Game.Game Game { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/Hubs/PlayerList"))
            .Build();
        this.hubConnection.On<PlayerListHub.Action, Player>("Update", this.Update);
        await this.hubConnection.StartAsync();
        await this.hubConnection.InvokeAsync("EnterLobby", this.Game);
    }

    public Task Update(PlayerListHub.Action action, Player player) =>
        action switch
        {
            PlayerListHub.Action.Signup => this.Signup(player),
            PlayerListHub.Action.Quit => this.Quit(player),
            PlayerListHub.Action.Ready => this.Ready(player),
            PlayerListHub.Action.Unready => this.Unready(player),
            _ => throw new ArgumentException("This is not a valid PlayerListHub.Action.", nameof(action))
        };

    public Task Signup(Player registeringPlayer)
    {
        if (this.players.SingleOrDefault(player => player == registeringPlayer) is null)
        {
            this.players.Add(registeringPlayer);
            this.StateHasChanged();
        }
        return Task.CompletedTask;
    }

    public Task Quit(Player player)
    {
        if (this.players.SingleOrDefault(quitingPlayer => quitingPlayer == player) is Player quitingPlayer)
        {
            this.players.Remove(quitingPlayer);
            this.StateHasChanged();
        }
        return Task.CompletedTask;
    }

    public Task Ready(Player player)
    {
        this.players.Single(playerToReady => playerToReady == player).SetReady();
        this.StateHasChanged();
        return Task.CompletedTask;
    }

    public Task Unready(Player player)
    {
        this.players.Single(playerToUnready => playerToUnready == player).Unready();
        this.StateHasChanged();
        return Task.CompletedTask;
    }
        
    public async ValueTask DisposeAsync()
    {
        if (this.hubConnection is not null)
            await this.hubConnection.DisposeAsync();
    }
}
@inject NavigationManager NavigationManager
@implements IPlayerListClient
@using Microsoft.AspNetCore.SignalR.Client
@using Cards.Data.Game
@implements IAsyncDisposable

<div class="form-group">
    <label>
        Number of players: @(playerCount.ToString())
    </label>
</div>

<hr />

<ul id="playerList">
    @foreach (Player player in players)
    {
        <li>
            @player.Name | @(player.Ready
                               ? string.Empty
                               : "Not ")Ready
        </li>
    }
</ul>

@code {
    public HubConnection hubConnection = null!;
    public IList<Player> players = new List<Player>();
    private int playerCount => players.Count;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/Hubs/PlayerList"))
            .Build();
        hubConnection.On<Player>("Signup", Signup);
        hubConnection.On<Player>("Quit", Quit);
        hubConnection.On<Player>("Ready", Ready);
        hubConnection.On<Player>("Unready", Unready);
        await hubConnection.StartAsync();
    }

    public Task Signup(Player registeringPlayer)
    {
        if (players.SingleOrDefault(player => player == registeringPlayer) is null)
        {
            players.Add(registeringPlayer);
            StateHasChanged();
        }
        return Task.CompletedTask;
    }

    public Task Quit(Player player)
    {
        if (players.SingleOrDefault(quitingPlayer => quitingPlayer == player) is Player quitingPlayer)
        {
            players.Remove(quitingPlayer);
            StateHasChanged();
        }
        return Task.CompletedTask;
    }

    public Task Ready(Player player)
    {
        players.Single(playerToReady => playerToReady == player).SetReady();
        StateHasChanged();
        return Task.CompletedTask;
    }

    public Task Unready(Player player)
    {
        players.Single(playerToUnready => playerToUnready == player).Unready();
        StateHasChanged();
        return Task.CompletedTask;
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
            await hubConnection.DisposeAsync();
    }

}
